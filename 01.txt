#モジュールの読み込み
from __future__ import print_function

import pandas as pd
from pandas import Series,DataFrame

from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

import numpy as np
import matplotlib.pyplot as plt

import keras
from keras.datasets import fashion_mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout
from keras.optimizers import RMSprop
from keras.optimizers import Adam


#train = pd.read_csv('../input/train.csv', nrows=45000000)
train = pd.read_csv('../input/train.csv', nrows=4000)
#train.head
#print(train["fare_amount"].mean())
#print(train["pickup_datetime"])

#train["pickup_datetime"] = pd.to_datetime(train["pickup_datetime"]).strftime("%Y-%m-%d %H:%M")
#print(train["pickup_datetime"])
x = DataFrame(train.drop(train.loc[:, ['fare_amount', 'pickup_datetime', 'key']],axis=1))
y = DataFrame(train["fare_amount"])
print(x)
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.05)

#x_train = x_train.astype(np.floatnumpy.datetime64)
#x_test = x_test.astype(np.float)

#y_train = keras.utils.to_categorical(y_train)
#y_test = keras.utils.to_categorical(y_test)


model = Sequential()

model.add(Dense(21, activation='softmax',
                           input_shape=(x_train.shape[1],)))
model.add(Dense(21, activation='softmax'))
model.add(Dense(35, activation='softmax'))
model.add(Dense(35, activation='softmax'))
model.add(Dense(21, activation='softmax'))
model.add(Dense(1))

#prediction = model.predict(x_train) 
#print(prediction) 

model.summary()
print("\n")

#ニューラルネットワークの実装②
model.compile(optimizer='rmsprop', loss='mse', metrics=['rmse'])

history = model.fit(x_train, y_train,batch_size=40,epochs=100,verbose=1,validation_split=0.2)

#ニューラルネットワークの推論
score = model.evaluate(x_test,y_test,verbose=1)
print("\n")
print("Test loss:",score[0])
print("Test accuracy:",score[1])


#sample = np.array(sample)
#predict = model.predict_classes(sample.reshape(1,-1),batch_size=1,verbose=0)
#
#print("\n")
#print("--予測値--")
#print(predict)
#print("\n")


def plot_history(history):
    print(history.history.keys())

    # 精度の履歴をプロット
    plt.plot(history.history['mean_squared_error'])
    plt.plot(history.history['val_mean_squared_error'])
    plt.title('model accuracy')
    plt.xlabel('epoch')
    plt.ylabel('accuracy')
    plt.legend(['mean_squared_error', 'val_mean_squared_error'], loc='lower right')
    plt.show()

    # 損失の履歴をプロット
    plt.plot(history.history['loss'])
    plt.plot(history.history['val_loss'])
    plt.title('model loss')
    plt.xlabel('epoch')
    plt.ylabel('loss')
    plt.legend(['loss', 'val_loss'], loc='lower right')
    plt.show()

# 学習履歴をプロット
plot_history(history)
